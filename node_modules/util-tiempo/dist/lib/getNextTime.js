"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Validate_1 = __importDefault(require("../Validate"));
const util_1 = require("../util");
const getMs_1 = __importDefault(require("./getMs"));
const getTime_1 = __importDefault(require("./getTime"));
/**
 * Get the next timestamp based on the provided options.
 * @param options - Array of options or a single options object.
 * @returns The next timestamp.
 * @throws Error if the time format is invalid.
 */
const getNextTime = (...options) => {
    // Parse the options and validate them.
    const parseOptions = Validate_1.default.optionsNextTime(options);
    const time = Validate_1.default.time(parseOptions?.time);
    const local = Validate_1.default.locale("pt-PT");
    const timezone = Validate_1.default.timezone(parseOptions?.timezone);
    // Validate the time format
    if (!/^(?:[01]\d|2[0-3]):(?:[0-5]\d)(?::[0-5]\d)?$/.test(time)) {
        throw new Error("Invalid time format, must be HH:MM:SS");
    }
    // Get the current date in the specified timezone
    const date = (0, util_1.formatDateFromString)(new Date().toLocaleString(local, { timeZone: timezone }));
    // Get the current timestamp in the specified timezone
    const timestamp = new Date(date).getTime();
    // Split the time into hour, minute, and second components
    const [hour, minute, second] = (0, getTime_1.default)({
        timestamp,
        timezone,
    }).split(":");
    // Calculate the base value by subtracting the milliseconds of hour, minute, and second from the timestamp
    let value = timestamp - (0, getMs_1.default)(`${hour}h`) - (0, getMs_1.default)(`${minute}m`) - (0, getMs_1.default)(`${second}s`);
    // Add the milliseconds of the input hour and minute to the value
    const inputArgs = time.split(":");
    value += (0, getMs_1.default)(`${inputArgs[0]}h`);
    value += (0, getMs_1.default)(`${inputArgs[1]}m`);
    // Add the milliseconds of the input second if present
    if (inputArgs.length === 3)
        value += (0, getMs_1.default)(`${inputArgs[2]}s`);
    // If the calculated value is in the past, add the milliseconds of a day to make it the next day
    if (value < Date.now())
        value += (0, getMs_1.default)("1d");
    // Return the final value
    return value;
};
exports.default = getNextTime;
