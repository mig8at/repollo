"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Validate_1 = __importDefault(require("../Validate"));
const util_1 = require("../util");
/**
 * Converts a time type string to milliseconds.
 * @param timeType - The time type string. Defaults to "0ms".
 * @returns The equivalent value in milliseconds.
 * @throws Error if the format is invalid.
 */
const getMs = (timeType = "0ms") => {
    // Extract the unit and unit type from the time type string
    const regexp = /^(\d+)(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|months?|mth|mh|years?|yrs?|y)$/i.exec(timeType);
    // Throw an error if the format is invalid
    if (!regexp)
        throw new Error("El formato no es valido!");
    // Extract the unit and unit type from the regular expression result
    const [, unit, unitType] = regexp;
    // Convert unit to a number and validate it
    let result = Validate_1.default.unit(unit);
    // Multiply the unit by the corresponding unit value based on the unit type
    const type = unitType.toLowerCase();
    if (util_1.dateList.year.aliases.includes(type))
        result *= util_1.dateList.year.unit;
    if (util_1.dateList.month.aliases.includes(type))
        result *= util_1.dateList.month.unit;
    if (util_1.dateList.week.aliases.includes(type))
        result *= util_1.dateList.week.unit;
    if (util_1.dateList.day.aliases.includes(type))
        result *= util_1.dateList.day.unit;
    if (util_1.dateList.hour.aliases.includes(type))
        result *= util_1.dateList.hour.unit;
    if (util_1.dateList.minute.aliases.includes(type))
        result *= util_1.dateList.minute.unit;
    if (util_1.dateList.second.aliases.includes(type))
        result *= util_1.dateList.second.unit;
    // Return the converted value in milliseconds
    return result;
};
exports.default = getMs;
