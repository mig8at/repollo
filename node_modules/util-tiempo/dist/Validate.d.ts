import { type GetTime, type GetNextTime, type GetFormatDate, type GetDate, type GetCompareDate, type DateFormats, type DateTypes, type Locales, type Timezones } from "./types";
declare class Validate {
    /**
     * Generate timestamps.
     * @param timestamp1 - The first timestamp. Defaults to the current timestamp.
     * @param timestamp2 - The second timestamp. If not provided, defaults to the current timestamp.
     * @returns An object containing timestamp1 and timestamp2.
     */
    static timestamps(timestamp1?: number, timestamp2?: number | null): {
        timestamp1: number;
        timestamp2: number;
    };
    /**
     * Returns the current timestamp or the provided timestamp if not null.
     * If no timestamp is provided, the current timestamp is used.
     * @param timestamp - An optional timestamp to use.
     * @returns The current timestamp or the provided timestamp if not null.
     */
    static timestamp(timestamp?: number | null): number;
    /**
     * Returns the locale if provided, otherwise defaults to "fr-FR".
     * @param locale - The desired locale.
     * @returns The selected locale.
     */
    static locale(locale?: Locales): Locales;
    /**
     * Returns the specified timezone or defaults to "Europe/Madrid".
     * @param timezone - The timezone to return.
     * @returns The specified timezone or "Europe/Madrid" if no timezone is provided.
     */
    static timezone(timezone?: Timezones): Timezones;
    /**
     * Returns a boolean value indicating whether the time format is 12-hour or not.
     * @param hour12 - Optional parameter indicating the desired time format. If not provided, defaults to false.
     * @returns A boolean value indicating whether the time format is 12-hour (true) or not (false).
     */
    static hour12(hour12?: boolean): boolean;
    /**
     * Returns the date type.
     * @param dateType - The input date type.
     * @returns The date type. Defaults to "ms" if not provided.
     */
    static dateType(dateType?: DateTypes): DateTypes;
    /**
     * Converts a value to a number.
     * @param unit - The value to be converted.
     * @returns The converted number value.
     */
    static unit(unit?: number | string): number;
    /**
     * Returns the date format.
     * @param dateFormat Optional parameter to specify the date format.
     * @returns The date format.
     */
    static dateFormat(dateFormat?: DateFormats): DateFormats;
    /**
     * Returns the time value if provided, otherwise an empty string.
     * @param time - Optional time value.
     * @returns The time value if provided, otherwise an empty string.
     */
    static time(time?: string): string;
    /**
     * Returns the next time based on the given options.
     * @param options - An array of options.
     * @returns The next time.
     */
    static optionsNextTime(options: any[]): GetNextTime;
    /**
     * Converts options array to GetTimeProps object.
     * @param options - The options array.
     * @returns The GetTimeProps object.
     */
    static optionsTime(options: any[]): GetTime;
    /**
     * Converts an array of options to a GetFormatDate object.
     * @param options - The array of options.
     * @returns The GetFormatDate object.
     */
    static optionsFormatDate(options: any[]): GetFormatDate;
    /**
     * Extracts the date options from the given array and returns an object with the extracted properties.
     * @param options - The array of options.
     * @returns An object with the extracted properties.
     */
    static optionsDate(options: any[]): GetDate;
    /**
     * Extracts the compare data from the given options.
     * @param options - The options array containing the compare data.
     * @returns The compare data object.
     */
    static optionsCompareData(options: any[]): GetCompareDate;
}
export default Validate;
